apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-gateway-config
data:
  nginx.conf: |
    events {}
    http {
        server {
            listen 80;

            location /camera/ {
                proxy_pass http://camera-frontend-service:80/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /timelaps/ {
                proxy_pass http://timelaps-frontend-service:80/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location /api/ {
                proxy_pass http://timelaps-service-svc:3000/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: camera-frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: camera-frontend
  template:
    metadata:
      labels:
        app: camera-frontend
    spec:
      containers:
      - name: camera-frontend
        image: 192.168.10.153:32000/camera-frontend:latest # <-- TODO: Replace with your image
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: camera-frontend-service
spec:
  selector:
    app: camera-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timelaps-frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timelaps-frontend
  template:
    metadata:
      labels:
        app: timelaps-frontend
    spec:
      containers:
      - name: timelaps-frontend
        image: 192.168.10.153:32000/timelaps-frontend:latest # <-- TODO: Replace with your image
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: timelaps-frontend-service
spec:
  selector:
    app: timelaps-frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timelaps-service-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi # Adjust size as needed
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timelaps-service-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: timelaps-service
  template:
    metadata:
      labels:
        app: timelaps-service
    spec:
      containers:
      - name: timelaps-service
        image: 192.168.10.153:32000/timelaps-service:latest # <-- TODO: Replace with your image
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: uploads-storage
          mountPath: /app/uploads
      volumes:
      - name: uploads-storage
        persistentVolumeClaim:
          claimName: timelaps-service-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: timelaps-service-svc
spec:
  selector:
    app: timelaps-service
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-gateway-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-gateway
  template:
    metadata:
      labels:
        app: nginx-gateway
    spec:
      containers:
      - name: nginx-gateway
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-gateway-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-gateway-service
spec:
  type: LoadBalancer # Or NodePort for local clusters
  selector:
    app: nginx-gateway
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
